#include "TF2.h"
#include "TH2.h"
#include "TMath.h"
#include "TSystem.h"
#include "matrix.h"

float fact(int n)
{
  if(n==0 || n==1) return 1;
  float result=1;
  for(int i=2;i<=n;i++)
    {
      result = i*result; 
    }
  return result;
}

Double_t ass_legend(int l, int m, Double_t x)
{
  // I will worry about negative values of m later
  // and also anything above l=3

  if(x>1 || x<-1){ cout << "Range Error in ass_legend" << endl; return 0;}

  if(l==0)
    {
      return 1;
    }
  else if(l==1)
    {
      if(m==0) return x;
      if(m==1) return -1*pow( 1- pow(x,2.) ,0.5);
    }
  else if(l==2)
    {
      if(m==0) return 0.5*(3*pow(x,2.)-1);
      if(m==1) return -3*x*pow(1 - pow(x,2.) ,0.5);
      if(m==2) return 3*(1-pow(x,2.));
    }
  else if(l==3)
    {
      if(m==0) return 0.5*x*(5*pow(x,2.)-3);
      if(m==1) return 1.5*(1-5*pow(x,2.))*pow(1- pow(x,2.) , 0.5);
      if(m==2) return 15*x*(1- pow(x,2.));
      if(m==3) {return -15*pow( 1 - pow(x,2.) ,1.5);}
    }
  else {cout << "ass_legend problem" << endl; return 0.;}
  return 0;
}

Double_t fun2(Double_t * x,Double_t * par)
{

  //matching with Bob's analysis may be a problem of sign conventions (ROOT conventions are not the same as mathworld (wolfram)!)

  //C_0,0
  Double_t result = par[0]*pow(ROOT::Math::assoc_legendre(3,0,x[0]),2);

  //C_1,1 & C_1,-1
  result = result + 2*2/fact(4)*pow(ROOT::Math::assoc_legendre(3,1,x[0]),2)*(par[1]-par[2]*cos(2*x[1]*3.1415927/180.));

  //C_2,2 & C_2,-2
  result = result + 2*1/fact(5)*pow(ROOT::Math::assoc_legendre(3,2,x[0]),2)*(par[3]+par[4]*cos(4*x[1]*3.1415927/180.));

  //C_3,3 & C_3,-3
  result = result + 2*1/fact(6)*pow(ROOT::Math::assoc_legendre(3,3,x[0]),2)*(par[5]-par[6]*cos(6*x[1]*3.1415927/180.));

  //C_3,2 -1 orig
  result = result + 4*par[7]*sqrt(fact(3-3)/fact(3+3))*ROOT::Math::assoc_legendre(3,2,x[0])*sqrt(fact(3-2)/fact(3+2))*ROOT::Math::assoc_legendre(3,3,x[0])*cos(x[1]*3.1415927/180.);

  //C_3,1
  result = result + 4*par[8]*sqrt(fact(3-3)/fact(3+3))*ROOT::Math::assoc_legendre(3,3,x[0])*sqrt(fact(3-1)/fact(3+1))*ROOT::Math::assoc_legendre(3,1,x[0])*cos(2*x[1]*3.1415927/180.);

  //C_3,0 -1 orig
  result = result + 4*par[9]*sqrt(fact(3-3)/fact(3+3))*ROOT::Math::assoc_legendre(3,3,x[0])*ROOT::Math::assoc_legendre(3,0,x[0])*cos(3*x[1]*3.1415927/180.);

  //C_3,-1
  result = result - 4*par[10]*sqrt(fact(3-3)/fact(3+3))*ROOT::Math::assoc_legendre(3,3,x[0])*sqrt(fact(3-1)/fact(3+1))*ROOT::Math::assoc_legendre(3,1,x[0])*cos(4*x[1]*3.1415927/180.);

  //C_3,-2 -1 orig
  result = result+4*par[11]*sqrt(fact(3-2)/fact(3+2))*ROOT::Math::assoc_legendre(3,3,x[0])*sqrt(fact(3-3)/fact(3+3))*ROOT::Math::assoc_legendre(3,2,x[0])*cos(5*x[1]*3.1415927/180.);

  //C_2,1 -1 orig
  result = result+4*par[12]*sqrt(fact(3-2)/fact(3+2))*ROOT::Math::assoc_legendre(3,2,x[0])*sqrt(fact(3-1)/fact(3+1))*ROOT::Math::assoc_legendre(3,1,x[0])*cos(x[1]*3.1415927/180.);

  //C_2,0
  result = result+4*par[13]*sqrt(fact(3-2)/fact(3+2))*ROOT::Math::assoc_legendre(3,2,x[0])*ROOT::Math::assoc_legendre(3,0,x[0])*cos(2*x[1]*3.1415927/180.);

  //C_2,-1 +1 orig
  result = result-4*par[14]*sqrt(fact(3-2)/fact(3+2))*ROOT::Math::assoc_legendre(3,2,x[0])*sqrt(fact(3-1)/fact(3+1))*ROOT::Math::assoc_legendre(3,1,x[0])*cos(3*x[1]*3.1415927/180.);

  //C_1,0 -1 orig
  result = result+4*par[15]*sqrt(fact(3-1)/fact(3+1))*ROOT::Math::assoc_legendre(3,1,x[0])*ROOT::Math::assoc_legendre(3,0,x[0])*cos(x[1]*3.1415927/180.);

  result = result*par[16]*7;

  return result;

}

Double_t fun3(Double_t * x,Double_t * par)
{

  //matching with Bob's analysis may be a problem of sign conventions (ROOT conventions are not the same as mathworld (wolfram)!)

  //C_0,0
  Double_t result = par[0]*pow(ass_legend(3,0,x[0]),2);

  //C_1,1 & C_1,-1
  result = result + 2*2/fact(4)*pow(ass_legend(3,1,x[0]),2)*(par[1]-par[2]*cos(2*x[1]*3.1415927/180.));

  //C_2,2 & C_2,-2
  result = result + 2*1/fact(5)*pow(ass_legend(3,2,x[0]),2)*(par[3]+par[4]*cos(4*x[1]*3.1415927/180.));

  //C_3,3 & C_3,-3
  result = result + 2*1/fact(6)*pow(ass_legend(3,3,x[0]),2)*(par[5]-par[6]*cos(6*x[1]*3.1415927/180.));

  //C_3,2 -1 orig
  result = result + 4*par[7]*sqrt(fact(3-3)/fact(3+3))*ass_legend(3,2,x[0])*sqrt(fact(3-2)/fact(3+2))*ass_legend(3,3,x[0])*cos(x[1]*3.1415927/180.);

  //C_3,1
  result = result + 4*par[8]*sqrt(fact(3-3)/fact(3+3))*ass_legend(3,3,x[0])*sqrt(fact(3-1)/fact(3+1))*ass_legend(3,1,x[0])*cos(2*x[1]*3.1415927/180.);

  //C_3,0 -1 orig
  result = result + 4*par[9]*sqrt(fact(3-3)/fact(3+3))*ass_legend(3,3,x[0])*ass_legend(3,0,x[0])*cos(3*x[1]*3.1415927/180.);

  //C_3,-1
  result = result - 4*par[10]*sqrt(fact(3-3)/fact(3+3))*ass_legend(3,3,x[0])*sqrt(fact(3-1)/fact(3+1))*ass_legend(3,1,x[0])*cos(4*x[1]*3.1415927/180.);

  //C_3,-2 -1 orig
  result = result+4*par[11]*sqrt(fact(3-2)/fact(3+2))*ass_legend(3,3,x[0])*sqrt(fact(3-3)/fact(3+3))*ass_legend(3,2,x[0])*cos(5*x[1]*3.1415927/180.);

  //C_2,1 -1 orig
  result = result+4*par[12]*sqrt(fact(3-2)/fact(3+2))*ass_legend(3,2,x[0])*sqrt(fact(3-1)/fact(3+1))*ass_legend(3,1,x[0])*cos(x[1]*3.1415927/180.);

  //C_2,0
  result = result+4*par[13]*sqrt(fact(3-2)/fact(3+2))*ass_legend(3,2,x[0])*ass_legend(3,0,x[0])*cos(2*x[1]*3.1415927/180.);

  //C_2,-1 +1 orig
  result = result-4*par[14]*sqrt(fact(3-2)/fact(3+2))*ass_legend(3,2,x[0])*sqrt(fact(3-1)/fact(3+1))*ass_legend(3,1,x[0])*cos(3*x[1]*3.1415927/180.);

  //C_1,0 -1 orig
  result = result+4*par[15]*sqrt(fact(3-1)/fact(3+1))*ass_legend(3,1,x[0])*ass_legend(3,0,x[0])*cos(x[1]*3.1415927/180.);

  result = result*par[16]*7;

  return result;

}


//should at some point try creating a histogram and setting the bin content to the function, it might make for a smoother plot


Double_t fun(Double_t * x, Double_t * par)
{

  Double_t result = par[0]*pow(ass_legend(3,0,x[0]),2);
  
  result = result + 2*2/fact(4)*pow(ass_legend(3,1,x[0]),2)*par[1];

  result = result + 2*1/fact(5)*pow(ass_legend(3,2,x[0]),2)*par[2];

  result = result + 2*1/fact(6)*pow(ass_legend(3,3,x[0]),2)*par[3];

  result = 7./2.*result*par[4];

  //cout << "result = " << result << endl;
  return result;
  

}

Double_t hey(Double_t * x, Double_t * par)
{
  Double_t result = ROOT::Math::assoc_legendre(3,3,x[0]);

  return result;

}

Double_t hey2(Double_t * x, Double_t * par)
{
  Double_t result = -15*pow(1-pow(x[0],2.) , 1.5);

  return result;

}



void fit2()
{
  //matrix C(4,4);
  TCanvas * c1 = new TCanvas("mycan","mycan",800,600);
  TFile * data = new TFile("~/unpacker/sort.root");
  TFile * sim = new TFile("~/sim12C/sim.root");
  //gROOT->cd();
  gStyle->SetOptStat(0);
  //gStyle->SetPalette(55); //55 for rainbow, doesn't look too bad

  // TH2F * eff = (TH2F*)sim->Get("cosPsi_Chi_midAngle_R")->Clone("1");
  // TH2F * effD = (TH2F*)sim->Get("cosPsi_Chi_midAngle_P")->Clone("3");

  TH1F * eff1D = (TH1F*)sim->Get("cosPsi_midAngle_R")->Clone("52");
  TH1F * eff1D2 = (TH1F*)sim->Get("cosPsi_midAngle_P")->Clone("46");

  
  if(!eff1D->Divide(eff1D2))
    {
      cout << "Efficiency not calculated correctly" << endl;
      return;
    }

  TH2F * AngDist = (TH2F*)data->Get(angName)->Clone("2");

  TH1D * projectionUse = AngDist->ProjectionX()->Clone("1D_angDist");
 
  

}
